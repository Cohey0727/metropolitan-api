AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  metropolitan
  Sample SAM Template for metropolitan

Parameters:
  StageName:
    Type: String
    Default: production
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 16
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'    

Resources:
  TicktesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub:
          ProjectTickets_${StageName}
      AttributeDefinitions:
      - AttributeName: projectId
        AttributeType: S
      - AttributeName: ticketId
        AttributeType: S
      - AttributeName: currentPosition
        AttributeType: S
      KeySchema:
      - AttributeName: projectId
        KeyType: HASH
      - AttributeName: ticketId
        KeyType: RANGE
      LocalSecondaryIndexes:
      - IndexName: currentPositionIndex
        KeySchema:
          - AttributeName: projectId
            KeyType: HASH
          - AttributeName: currentPosition
            KeyType: RANGE
        Projection:
          ProjectionType: KEYS_ONLY
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  
  ConnetionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 
        Fn::Sub:
          ProjectConnections_${StageName}
      AttributeDefinitions:
      - AttributeName: projectId
        AttributeType: S
      - AttributeName: connectionId
        AttributeType: S
      KeySchema:
      - AttributeName: projectId
        KeyType: HASH
      - AttributeName: connectionId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
  
  TicketApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tickets/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        GetTickets:
          Type: Api
          Properties:
            Path: /tickets
            Method: get
      Environment:
        Variables:
          TABLE_NAME:  
            Fn::Sub:
              ProjectTickets_${StageName}
      Policies:
      - DynamoDBCrudPolicy:
          TableName:  
            Fn::Sub:
              ProjectConnections_${StageName}
      - DynamoDBCrudPolicy:
          TableName:  
            Fn::Sub:
              ProjectTickets_${StageName}

  TicketsWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: TicketsWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: onconnect/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME:  
            Fn::Sub:
              ProjectConnections_${StageName}
      Policies:
      - DynamoDBCrudPolicy:
          TableName:  
            Fn::Sub:
              ProjectConnections_${StageName}
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref TicketsWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref TicketsWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TicketsWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ondisconnect/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME:
            Fn::Sub:
              ProjectConnections_${StageName}
      Policies:
      - DynamoDBCrudPolicy:
          TableName:  
            Fn::Sub:
              ProjectConnections_${StageName}
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref TicketsWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref TicketsWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TicketsWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref TicketsWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      Description: Production Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref TicketsWebSocket

  TicketsProgateFunc:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      CodeUri: tickets/
      Handler: ticket_progate.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          CONNETION_TABLE_NAME:
            Fn::Sub:
              ProjectConnections_${StageName}
          TICKET_TABLE_NAME:
            Fn::Sub:
              ProjectTickets_${StageName}
          WS_ENDPOINT: !Join [ '', ['https://', !Ref TicketsWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref Stage] ]
      Policies:
      - DynamoDBCrudPolicy:
          TableName:  
            Fn::Sub:
              ProjectConnections_${StageName}
      - DynamoDBCrudPolicy:
          TableName:  
            Fn::Sub:
              ProjectTickets_${StageName}
      Events:
        TicketsProgateFunc:
          Type: DynamoDB
          Properties:
            Stream: 
              Fn::GetAtt: [ TicktesTable, StreamArn ]
            StartingPosition: LATEST

Outputs:

  TicketsWebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref TicketsWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref Stage] ]

  TicketApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/tickets"
