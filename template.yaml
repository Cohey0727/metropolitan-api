AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Metropolitan Project Mangement Tool

Globals:
  Api:
    Cors:
      AllowMethods: "'GET, POST, PUT, DELETE, PATCH, OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,X-Amz-Security-Token,Authorization,X-Api-Key,X-Requested-With,Accept,Access-Control-Allow-Methods,Access-Control-Allow-Origin,Access-Control-Allow-Headers'"
      AllowOrigin: "'*'"

Parameters:
  StageName:
    Type: String
    Default: Prod
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 16
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: "Required. Can be characters and underscore only. No numbers or special characters allowed."
  RestApiUrl:
    Type: String
    Default: "https://ServerlessRestApi.execute-api.AWS.Region.amazonaws.com/Prod"
    Description: Self reference
  Auth0Domain:
    Type: String
    Default: "cohey0727.auth0.com"
    Description: Auth0 Domain
  Auth0CientId:
    Type: String
    Description: The Client id of auth0 mangement api. It is used for get users.
  Auth0CientSecret:
    Type: String
    Description: The Client secret of auth0 mangement api. It is used for get users.

Resources:
  ParametersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: Parameters_${StageName}
      AttributeDefinitions:
        - AttributeName: parameterKey
          AttributeType: S
      KeySchema:
        - AttributeName: parameterKey
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: True
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      StreamSpecification:
        StreamViewType: KEYS_ONLY

  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: Projects_${StageName}
      AttributeDefinitions:
        - AttributeName: projectId
          AttributeType: S
      KeySchema:
        - AttributeName: projectId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      StreamSpecification:
        StreamViewType: KEYS_ONLY

  ProjectsUsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ProjectsUsers_${StageName}
      AttributeDefinitions:
        - AttributeName: type
          AttributeType: S
        - AttributeName: primaryKey
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: projectId
          AttributeType: S
      KeySchema:
        - AttributeName: type
          KeyType: HASH
        - AttributeName: primaryKey
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: projectIdIndex
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: projectId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: userIdIndex
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: userId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      StreamSpecification:
        StreamViewType: KEYS_ONLY

  TicketsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ProjectTickets_${StageName}
      AttributeDefinitions:
        - AttributeName: projectId
          AttributeType: S
        - AttributeName: ticketId
          AttributeType: S
        - AttributeName: currentPosition
          AttributeType: S
      KeySchema:
        - AttributeName: projectId
          KeyType: HASH
        - AttributeName: ticketId
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: currentPositionIndex
          KeySchema:
            - AttributeName: projectId
              KeyType: HASH
            - AttributeName: currentPosition
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      StreamSpecification:
        StreamViewType: KEYS_ONLY

  ConnectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ProjectConnections_${StageName}
      AttributeDefinitions:
        - AttributeName: projectId
          AttributeType: S
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: projectId
          KeyType: HASH
        - AttributeName: connectionId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True

  UserApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user/
      Handler: rest.lambda_handler
      Runtime: python3.8
      Events:
        ListUser:
          Type: Api
          Properties:
            Path: /users
            Method: get
      Environment:
        Variables:
          AUTH0_DOMAIN: !Ref Auth0Domain
          AUTH0_API_CLIENT_ID: !Ref Auth0CientId
          AUTH0_API_CLIENT_SECRET: !Ref Auth0CientSecret
          PARAMETER_TABLE_NAME:
            Fn::Sub: Parameters_${StageName}
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Fn::Sub: Parameters_${StageName}

  ProjectApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: project/
      Handler: rest.lambda_handler
      Runtime: python3.8
      Events:
        ListProject:
          Type: Api
          Properties:
            Path: /projects
            Method: get
        RetrieveProject:
          Type: Api
          Properties:
            Path: /projects/{project_id}
            Method: get
        CreateProject:
          Type: Api
          Properties:
            Path: /projects
            Method: post
        UpdateProject:
          Type: Api
          Properties:
            Path: /projects/{project_id}
            Method: put
        DestroyProject:
          Type: Api
          Properties:
            Path: /projects/{project_id}
            Method: delete
      Environment:
        Variables:
          PROJECT_TABLE_NAME:
            Fn::Sub: Projects_${StageName}
          PROJECT_USER_TABLE_NAME:
            Fn::Sub: ProjectsUsers_${StageName}
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Fn::Sub: Projects_${StageName}
        - DynamoDBCrudPolicy:
            TableName:
              Fn::Sub: ProjectsUsers_${StageName}

  UserProjectApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user_project/
      Handler: rest.lambda_handler
      Runtime: python3.8
      Events:
        ListUserProjects:
          Type: Api
          Properties:
            Path: /users/{user_id}/projects
            Method: get
        JoinUserProject:
          Type: Api
          Properties:
            Path: /users/{user_id}/projects/{project_id}
            Method: put
        RemoveUserProject:
          Type: Api
          Properties:
            Path: /users/{user_id}/projects/{project_id}
            Method: delete
      Environment:
        Variables:
          PROJECT_TABLE_NAME:
            Fn::Sub: Projects_${StageName}
          PROJECT_USER_TABLE_NAME:
            Fn::Sub: ProjectsUsers_${StageName}
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Fn::Sub: Projects_${StageName}
        - DynamoDBCrudPolicy:
            TableName:
              Fn::Sub: ProjectsUsers_${StageName}

  ProjectUserApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: project_user/
      Handler: rest.lambda_handler
      Runtime: python3.8
      Events:
        ListProjectUser:
          Type: Api
          Properties:
            Path: /projects/{project_id}/users
            Method: get
        CreateProjectUser:
          Type: Api
          Properties:
            Path: /projects/{project_id}/users
            Method: post
      Environment:
        Variables:
          PROJECT_USER_TABLE_NAME:
            Fn::Sub: ProjectsUsers_${StageName}
          USER_API_URL:
            Fn::Sub: ${RestApiUrl}/users
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Fn::Sub: ProjectsUsers_${StageName}

  TicketApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ticket/
      Handler: rest.lambda_handler
      Runtime: python3.8
      Events:
        ListTicket:
          Type: Api
          Properties:
            Path: /projects/{project_id}/tickets
            Method: get
        CreateTicket:
          Type: Api
          Properties:
            Path: /projects/{project_id}/tickets
            Method: post
        UpdateTicket:
          Type: Api
          Properties:
            Path: /projects/{project_id}/tickets/{ticket_id}
            Method: put
        DestroyTicket:
          Type: Api
          Properties:
            Path: /projects/{project_id}/tickets/{ticket_id}
            Method: delete
      Environment:
        Variables:
          TABLE_NAME:
            Fn::Sub: ProjectTickets_${StageName}
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Fn::Sub: ProjectTickets_${StageName}

  TicketsWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: TicketsWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: onconnect/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME:
            Fn::Sub: ProjectConnections_${StageName}
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Fn::Sub: ProjectConnections_${StageName}
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref TicketsWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref TicketsWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ConnectInteg
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TicketsWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ondisconnect/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          TABLE_NAME:
            Fn::Sub: ProjectConnections_${StageName}
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Fn::Sub: ProjectConnections_${StageName}
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref TicketsWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref TicketsWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DisconnectInteg
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - TicketsWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref TicketsWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StageName
      Description: Production Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref TicketsWebSocket

  TicketsProgateFunc:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      CodeUri: ticket/
      Handler: ticket_progate.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          CONNECTION_TABLE_NAME:
            Fn::Sub: ProjectConnections_${StageName}
          TICKET_TABLE_NAME:
            Fn::Sub: ProjectTickets_${StageName}
          WS_ENDPOINT:
            !Join [
              "",
              [
                "https://",
                !Ref TicketsWebSocket,
                ".execute-api.",
                !Ref "AWS::Region",
                ".amazonaws.com/",
                !Ref Stage,
              ],
            ]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              Fn::Sub: ProjectConnections_${StageName}
        - DynamoDBCrudPolicy:
            TableName:
              Fn::Sub: ProjectTickets_${StageName}
        - Statement:
            - Effect: Allow
              Action:
                - "execute-api:ManageConnections"
              Resource:
                - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TicketsWebSocket}/*"
      Events:
        TicketsProgateFunc:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt: [TicketsTable, StreamArn]
            StartingPosition: TRIM_HORIZON

Outputs:
  TicketsWebSocketUrl:
    Value:
      !Join [
        "",
        [
          "wss://",
          !Ref TicketsWebSocket,
          ".execute-api.",
          !Ref "AWS::Region",
          ".amazonaws.com/",
          !Ref Stage,
        ],
      ]
  RestApiUrl:
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
